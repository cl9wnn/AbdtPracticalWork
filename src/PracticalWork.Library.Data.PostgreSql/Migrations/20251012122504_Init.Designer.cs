// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PracticalWork.Library.Data.PostgreSql;

#nullable disable

namespace PracticalWork.Library.Data.PostgreSql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251012122504_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Authors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("CoverImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.BookBorrowEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BorrowDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("BookBorrows");
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.ReaderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.EducationalBookEntity", b =>
                {
                    b.HasBaseType("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity");

                    b.Property<string>("GradeLevel")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.ToTable("EducationalBooks");
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.FictionBookEntity", b =>
                {
                    b.HasBaseType("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity");

                    b.Property<string>("CategoriesOfFiction")
                        .HasColumnType("text");

                    b.ToTable("FictionBooks");
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.ScientificBookEntity", b =>
                {
                    b.HasBaseType("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("ResearchField")
                        .HasColumnType("text");

                    b.ToTable("ScientificBooks");
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.BookBorrowEntity", b =>
                {
                    b.HasOne("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity", null)
                        .WithMany("IssuanceRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticalWork.Library.Data.PostgreSql.Entities.ReaderEntity", null)
                        .WithMany("BorrowedRecords")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.EducationalBookEntity", b =>
                {
                    b.HasOne("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity", null)
                        .WithOne()
                        .HasForeignKey("PracticalWork.Library.Data.PostgreSql.Entities.EducationalBookEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.FictionBookEntity", b =>
                {
                    b.HasOne("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity", null)
                        .WithOne()
                        .HasForeignKey("PracticalWork.Library.Data.PostgreSql.Entities.FictionBookEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.ScientificBookEntity", b =>
                {
                    b.HasOne("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity", null)
                        .WithOne()
                        .HasForeignKey("PracticalWork.Library.Data.PostgreSql.Entities.ScientificBookEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.AbstractBookEntity", b =>
                {
                    b.Navigation("IssuanceRecords");
                });

            modelBuilder.Entity("PracticalWork.Library.Data.PostgreSql.Entities.ReaderEntity", b =>
                {
                    b.Navigation("BorrowedRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
